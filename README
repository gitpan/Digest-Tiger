This module implements the tiger hash, which returns a 192-bit hash value.

For more information about the hash:
http://www.cs.technion.ac.il/~biham/Reports/Tiger/

Usage:
use Digest::Tiger;

# hash() returns a 192 bit hash
my $hash = Digest::Tiger::hash('Tiger')

# hexhash() returns a hex representation of the 192 bits...
# $hexhash should be 'DD00230799F5009FEC6DEBC838BB6A27DF2B9D6F110C7937'
my $hexhash = Digest::Tiger::hexhash('Tiger')

This program is free software; you can redistribute it and/or 
modify it under the same terms as Perl itself.  

Note: as of version 0.02, hexhash() returns a hex digest starting
with the least significant byte first.  For example:

Hash of "Tiger":
  0             7  8            15 16            23
 DD00230799F5009F EC6DEBC838BB6A27 DF2B9D6F110C7937

Instead of:
  7             0 15             8 23            16
 9F00F599072300DD 276ABB38C8EB6DEC 37790C116F9D2BDF

The print order issue was brought up by Gordon Mohr; Eli Biham clarifies with:
"The testtiger.c was intended to allow easy testing of the code,
rather than to define any particular print order.
...using a standard printing method, like the one for MD5 or SHA-1,
the DD should probably should be printed first [for the example above]".

